import { type ZodDefault, type ZodLiteral, type ZodOptional, type ZodSchema, type ZodString, type ZodUnion, z } from "zod";
import type { CheckboxProps, DateFieldProps, DatetimeFieldProps, FieldProps, FieldWrapperProps, NumberProps, SelectProps, StringProps, TextareaProps, Validation } from "./types";
type ZodWrapper<T extends ZodSchema> = T | ZodDefault<T> | ZodOptional<T | ZodDefault<T>>;
export declare function getCheckboxValidation(block: CheckboxProps & FieldWrapperProps): z.ZodBoolean | ZodDefault<z.ZodBoolean> | ZodOptional<z.ZodBoolean>;
export declare function getDateValidation(block: DateFieldProps & FieldWrapperProps): z.ZodEffects<ZodString | ZodDefault<ZodString> | ZodOptional<ZodString | ZodDefault<ZodString>>, string | undefined, unknown>;
export declare function getDatetimeValidation(block: DatetimeFieldProps & FieldWrapperProps): z.ZodEffects<ZodString | ZodDefault<ZodString> | ZodOptional<ZodString | ZodDefault<ZodString>>, string | undefined, unknown>;
export declare function getObjectValidation<T extends Record<string, FieldProps>>(blocks: T): z.ZodObject<{ [K in keyof Validation<T>]: Validation<T>[K]; }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{ [K in keyof Validation<T>]: Validation<T>[K]; }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{ [K in keyof Validation<T>]: Validation<T>[K]; }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{ [K in keyof Validation<T>]: Validation<T>[K]; }>]: z.baseObjectInputType<{ [K in keyof Validation<T>]: Validation<T>[K]; }>[k_1]; }>;
export declare function getNumberValidation(block: NumberProps & FieldWrapperProps): z.ZodNumber | ZodDefault<z.ZodNumber> | ZodOptional<ZodUnion<[z.ZodNumber | ZodDefault<z.ZodNumber>, z.ZodNaN]>>;
export declare function getSelectValidation(block: SelectProps & FieldWrapperProps): ZodWrapper<z.ZodEffects<ZodUnion<[ZodString, z.ZodNumber]>, string | number, string | number>>;
export declare function getStringValidation(block: StringProps & FieldWrapperProps): ZodString | ZodDefault<ZodString> | ZodUnion<[ZodLiteral<"">, ZodString | ZodDefault<ZodString>]>;
export declare function getTextareaValidation(block: TextareaProps & FieldWrapperProps): ZodWrapper<ZodString>;
export declare function getValidation<T extends Record<string, FieldProps>>(block: FieldProps): ZodSchema<any, z.ZodTypeDef, any>;
export {};
