import { CommandGroup, CommandInput, CommandItem, PopoverContent } from "@rafty/ui";
import { type PropsWithChildren, type ReactNode } from "react";
import { type ComboboxContext } from "./context";
import type { ComboboxOptionType } from "./types";
type UserProps = "id" | "options";
type InternalProps = "isOpen" | "setOpen" | "type" | "selected" | "onSelectionChange" | "triggerRef";
export type Combobox = PropsWithChildren<({
    selected?: string | number;
    onSelectionChange?: (selected?: string | number) => void;
    type?: "single";
} | {
    selected?: (string | number)[];
    onSelectionChange?: (selected?: (string | number)[]) => void;
    type: "multi";
}) & Partial<Pick<ComboboxContext, UserProps>> & Partial<Omit<ComboboxContext, UserProps | InternalProps>>>;
export declare function Combobox({ isDisabled, isInvalid, isLoading, isReadOnly, placeholder, id, options, children, ...props }: Combobox): import("react/jsx-runtime").JSX.Element;
export declare const ComboboxTrigger: import("react").ForwardRefExoticComponent<Omit<import("@radix-ui/react-popover").PopoverTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: import("@rafty/ui").ValueOrFunction | undefined;
    isActive?: import("@rafty/ui").ValueOrFunction | undefined;
    isDisabled?: import("@rafty/ui").ValueOrFunction | undefined;
    isHidden?: import("@rafty/ui").ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export type ComboboxContent = Omit<PopoverContent, "children"> & {
    showSearch?: boolean;
    shouldFilter?: boolean;
    search?: CommandInput["value"];
    onSearchChange?: CommandInput["onValueChange"];
    children?: (props: {
        option: ComboboxOptionType;
        index: number;
    }) => ReactNode;
    isLoading?: boolean;
};
export declare function ComboboxContent({ className, style, children: Children, showSearch, shouldFilter, search, onSearchChange, isLoading, ...props }: ComboboxContent): import("react/jsx-runtime").JSX.Element;
export type ComboboxItem = CommandItem;
export declare const ComboboxItem: import("react").ForwardRefExoticComponent<Omit<{
    children?: ReactNode;
} & Omit<import("react").HTMLAttributes<HTMLDivElement>, "disabled" | "value" | "onSelect"> & {
    disabled?: boolean | undefined;
    onSelect?: ((value: string) => void) | undefined;
    value?: string | undefined;
    forceMount?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type ComboboxItemsGroup = CommandGroup;
export declare const ComboboxItemsGroup: import("react").ForwardRefExoticComponent<Omit<{
    children?: ReactNode;
} & Omit<import("react").HTMLAttributes<HTMLDivElement>, "value" | "heading"> & {
    heading?: ReactNode;
    value?: string | undefined;
    forceMount?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export declare const ComboboxClearButton: import("react").ForwardRefExoticComponent<import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: import("@rafty/ui").ValueOrFunction | undefined;
    isActive?: import("@rafty/ui").ValueOrFunction | undefined;
    isDisabled?: import("@rafty/ui").ValueOrFunction | undefined;
    isHidden?: import("@rafty/ui").ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export {};
