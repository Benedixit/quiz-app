import { TreeView as ArkTreeView, type TreeViewRootProps } from "@ark-ui/react";
import { type ComponentPropsWithoutRef, type ReactNode } from "react";
import { type TreeViewContext } from "./context";
export type TreeView = TreeViewRootProps & Partial<TreeViewContext>;
export declare const TreeView: import("react").ForwardRefExoticComponent<ArkTreeView.RootProps & Partial<TreeViewContext> & import("react").RefAttributes<HTMLDivElement>>;
export declare const treeViewItemClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type TreeViewItem = ComponentPropsWithoutRef<typeof ArkTreeView.Branch>;
export declare const TreeViewItem: import("react").ForwardRefExoticComponent<Omit<ArkTreeView.BranchProps & import("react").RefAttributes<HTMLLIElement>, "ref"> & import("react").RefAttributes<HTMLLIElement>>;
export declare const treeViewLabelClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const treeViewLabelSingleClasses: {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
};
export declare const treeViewLabelBranchClasses: {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
};
export declare const treeViewLabelIndicatorClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type TreeViewLabel = ComponentPropsWithoutRef<typeof ArkTreeView.BranchControl> & {
    openIndicator?: ReactNode;
    closeIndicator?: ReactNode;
    showIndicator?: boolean;
    type?: "single" | "branch";
};
export declare const TreeViewLabel: import("react").ForwardRefExoticComponent<Omit<ArkTreeView.BranchControlProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    openIndicator?: ReactNode;
    closeIndicator?: ReactNode;
    showIndicator?: boolean | undefined;
    type?: "single" | "branch" | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type TreeViewContent = ComponentPropsWithoutRef<typeof ArkTreeView.BranchContent>;
export declare const TreeViewContent: import("react").ForwardRefExoticComponent<Omit<ArkTreeView.BranchContentProps & import("react").RefAttributes<HTMLUListElement>, "ref"> & import("react").RefAttributes<HTMLUListElement>>;
