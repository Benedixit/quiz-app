import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { type ComponentPropsWithoutRef } from "react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export declare const checkboxClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    disabled?: boolean | null | undefined;
    invalid?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const checkboxLabelClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
type CheckboxProps = ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;
export type Checkbox = CheckboxProps & {
    size?: SizeType;
    isReadOnly?: ValueOrFunction;
    isDisabled?: ValueOrFunction;
    isRequired?: ValueOrFunction;
    isInvalid?: ValueOrFunction;
    isLoading?: ValueOrFunction;
};
export declare const Checkbox: import("react").ForwardRefExoticComponent<Omit<CheckboxPrimitive.CheckboxProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    size?: SizeType;
    isReadOnly?: ValueOrFunction | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isRequired?: ValueOrFunction | undefined;
    isInvalid?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export {};
