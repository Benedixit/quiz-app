import { type HTMLAttributes, type ReactNode } from "react";
import { type StepperContext } from "./context";
export declare const stepperClasses: (props?: ({
    direction?: "horizontal" | "vertical" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type StepType = {
    title?: string;
    subTitle?: string;
    description?: string;
    icon?: ReactNode;
};
export type Stepper = Omit<HTMLAttributes<HTMLDivElement>, "onClick" | "defaultValue"> & Partial<StepperContext> & {
    initial?: number;
    value?: number;
    onValueChange?: (value: number) => void;
    connector?: (props: StepsConnector) => JSX.Element;
    steps: StepType[];
};
export declare const Stepper: import("react").ForwardRefExoticComponent<Omit<HTMLAttributes<HTMLDivElement>, "onClick" | "defaultValue"> & Partial<StepperContext> & {
    initial?: number | undefined;
    value?: number | undefined;
    onValueChange?: ((value: number) => void) | undefined;
    connector?: ((props: StepsConnector) => JSX.Element) | undefined;
    steps: StepType[];
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const stepperItemClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    clickable?: boolean | null | undefined;
    current?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const stepperItemIconClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    clickable?: boolean | null | undefined;
    current?: boolean | null | undefined;
    incomplete?: boolean | null | undefined;
    completed?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const contentWrapperClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    current?: boolean | null | undefined;
    clickable?: boolean | null | undefined;
    incomplete?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const connecterClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    direction?: "horizontal" | "vertical" | null | undefined;
    active?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
type StepsConnector = {
    active: boolean;
};
declare function StepsConnector(props: StepsConnector): import("react/jsx-runtime").JSX.Element;
export declare const titleAndSubTitleWrapperClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const titleClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const helpTextClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export {};
