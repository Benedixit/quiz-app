import * as DropdownMenu from "@radix-ui/react-dropdown-menu";
import { type ComponentPropsWithoutRef } from "react";
import { Button } from "../button";
import type { ValueOrFunction } from "../types";
import { type MenuContext } from "./context";
export type Menu = ComponentPropsWithoutRef<typeof DropdownMenu.Root> & Partial<MenuContext>;
export declare function Menu({ children, size, isUnstyled, isDisabled, ...props }: Menu): import("react/jsx-runtime").JSX.Element;
export declare const menuTriggerClasses: (props?: ({
    colorScheme?: "primary" | "secondary" | "error" | "success" | null | undefined;
    variant?: "solid" | "outline" | "ghost" | null | undefined;
    disabled?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type MenuTrigger = ComponentPropsWithoutRef<typeof DropdownMenu.Trigger> & Button;
export declare const MenuTrigger: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: ValueOrFunction | undefined;
    isActive?: ValueOrFunction | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isHidden?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export type MenuContent = ComponentPropsWithoutRef<typeof DropdownMenu.Content> & {
    isUnstyled?: boolean;
    isArrow?: ValueOrFunction;
    arrowClassNames?: string;
};
export declare const MenuContent: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
    isArrow?: ValueOrFunction | undefined;
    arrowClassNames?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenuLabel = ComponentPropsWithoutRef<typeof DropdownMenu.Label> & {
    isUnstyled?: boolean;
};
export declare const MenuLabel: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuLabelProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenuItem = ComponentPropsWithoutRef<typeof DropdownMenu.Item> & {
    isUnstyled?: boolean;
};
export declare const MenuItem: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenuGroup: import("react").ForwardRefExoticComponent<DropdownMenu.DropdownMenuGroupProps & import("react").RefAttributes<HTMLDivElement>>;
export type MenuCheckboxItem = ComponentPropsWithoutRef<typeof DropdownMenu.CheckboxItem> & {
    isUnstyled?: boolean;
};
export declare const MenuCheckboxItem: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuCheckboxItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenuRadioGroup: import("react").ForwardRefExoticComponent<DropdownMenu.DropdownMenuRadioGroupProps & import("react").RefAttributes<HTMLDivElement>>;
export type MenuRadioItem = ComponentPropsWithoutRef<typeof DropdownMenu.RadioItem> & {
    isUnstyled?: boolean;
};
export declare const MenuRadioItem: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuRadioItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenuSub = ComponentPropsWithoutRef<typeof DropdownMenu.Sub>;
export declare function MenuSub({ children, ...props }: MenuSub): import("react/jsx-runtime").JSX.Element;
export type MenuSubTrigger = ComponentPropsWithoutRef<typeof DropdownMenu.SubTrigger> & {
    isUnstyled?: boolean;
};
export declare const MenuSubTrigger: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuSubTriggerProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenuSubContent = ComponentPropsWithoutRef<typeof DropdownMenu.SubContent> & {
    isUnstyled?: boolean;
};
export declare const MenuSubContent: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuSubContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenuSeparator = ComponentPropsWithoutRef<typeof DropdownMenu.Separator> & {
    isUnstyled?: boolean;
};
export declare const MenuSeparator: import("react").ForwardRefExoticComponent<Omit<DropdownMenu.DropdownMenuSeparatorProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
