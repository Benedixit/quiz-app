import { type HTMLAttributes } from "react";
import { type AlertContext } from "./context";
export declare const alertClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    status?: "success" | "warning" | "error" | "info" | null | undefined;
    variant?: "simple" | "solid" | "left-accent" | "top-accent" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Alert = HTMLAttributes<HTMLDivElement> & Partial<AlertContext>;
export declare const Alert: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLDivElement> & Partial<AlertContext> & import("react").RefAttributes<HTMLDivElement>>;
export declare const alertIconClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type AlertIcon = {
    className?: string;
    isUnstyled?: boolean;
};
export declare function AlertIcon({ className, isUnstyled }: AlertIcon): import("react/jsx-runtime").JSX.Element;
export declare const alertTitleClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type AlertTitle = HTMLAttributes<HTMLHeadingElement> & {
    isUnstyled?: boolean;
};
export declare const AlertTitle: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLHeadingElement> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLHeadingElement>>;
export declare const alertDescriptionClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    variant?: "simple" | "solid" | "left-accent" | "top-accent" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type AlertDescription = HTMLAttributes<HTMLParagraphElement> & {
    isUnstyled?: boolean;
};
export declare const AlertDescription: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLParagraphElement> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLParagraphElement>>;
