import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { type ComponentPropsWithoutRef } from "react";
import type { ValueOrFunction } from "../types";
import { type TooltipContext } from "./context";
export type Tooltip = ComponentPropsWithoutRef<typeof TooltipPrimitive.Root> & Partial<TooltipContext>;
export declare function Tooltip({ children, size, isDisabled, ...props }: Tooltip): import("react/jsx-runtime").JSX.Element;
export type TooltipTrigger = ComponentPropsWithoutRef<typeof TooltipPrimitive.Trigger>;
export declare const TooltipTrigger: import("react").ForwardRefExoticComponent<Omit<TooltipPrimitive.TooltipTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
export declare const tooltipContentClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    animated?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type TooltipContent = ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> & {
    isArrow?: ValueOrFunction;
    hasAnimation?: ValueOrFunction;
};
export declare const TooltipContent: import("react").ForwardRefExoticComponent<Omit<TooltipPrimitive.TooltipContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isArrow?: ValueOrFunction | undefined;
    hasAnimation?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
