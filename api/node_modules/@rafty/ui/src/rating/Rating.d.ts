/// <reference types="react" />
import { RatingGroup, type RatingGroupRootProps } from "@ark-ui/react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export declare const ratingControlClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    disabled?: boolean | null | undefined;
    loading?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const ratingItemClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const ratingItemIconClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    highlighted?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Rating = Omit<RatingGroupRootProps, "onValueChange"> & {
    size?: SizeType;
    onValueChange?: (value?: number) => void;
    isDisabled?: ValueOrFunction;
    isLoading?: ValueOrFunction;
    isReadOnly?: ValueOrFunction;
};
export declare const Rating: import("react").ForwardRefExoticComponent<Omit<RatingGroup.RootProps, "onValueChange"> & {
    size?: SizeType;
    onValueChange?: ((value?: number) => void) | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
    isReadOnly?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
