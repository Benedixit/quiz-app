import { type ButtonHTMLAttributes } from "react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
type ButtonSize = SizeType<"icon" | "fab">;
export declare const buttonClasses: (props?: ({
    colorScheme?: "primary" | "secondary" | "error" | "success" | null | undefined;
    variant?: "solid" | "outline" | "ghost" | null | undefined;
    size?: "icon" | "fab" | "sm" | "md" | "lg" | null | undefined;
    loading?: boolean | null | undefined;
    disabled?: boolean | null | undefined;
    active?: boolean | null | undefined;
    hidden?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Button = ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element;
    rightIcon?: JSX.Element;
    loadingText?: string;
    isUnstyled?: boolean;
    colorScheme?: "primary" | "secondary" | "error" | "success";
    variant?: "solid" | "outline" | "ghost";
    size?: ButtonSize;
    isLoading?: ValueOrFunction;
    isActive?: ValueOrFunction;
    isDisabled?: ValueOrFunction;
    isHidden?: ValueOrFunction;
};
export declare const Button: import("react").ForwardRefExoticComponent<ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ButtonSize | undefined;
    isLoading?: ValueOrFunction | undefined;
    isActive?: ValueOrFunction | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isHidden?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export {};
