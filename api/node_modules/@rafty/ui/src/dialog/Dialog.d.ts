import * as DialogPrimitive from "@radix-ui/react-dialog";
import { type ComponentPropsWithoutRef, type HTMLAttributes } from "react";
import { Button } from "../button";
import type { ValueOrFunction } from "../types";
import { type DialogContext } from "./context";
export type Dialog = ComponentPropsWithoutRef<typeof DialogPrimitive.Root> & Partial<DialogContext>;
export declare function Dialog({ children, size, isUnstyled, ...props }: Dialog): import("react/jsx-runtime").JSX.Element;
export type DialogTrigger = ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger> & Button;
export declare const DialogTrigger: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: ValueOrFunction | undefined;
    isActive?: ValueOrFunction | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isHidden?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export type DialogOverlay = ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> & {
    isUnstyled?: boolean;
};
export declare const DialogOverlay: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogOverlayProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type DialogContent = ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {
    isUnstyled?: boolean;
    showCloseButton?: ValueOrFunction;
};
export declare const DialogContent: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
    showCloseButton?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type DialogHeader = HTMLAttributes<HTMLElement> & {
    isUnstyled?: boolean;
};
export declare const DialogHeader: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLElement> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLElement>>;
export type DialogFooter = HTMLAttributes<HTMLDivElement> & {
    isUnstyled?: boolean;
};
export declare const DialogFooter: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLDivElement> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type DialogTitle = ComponentPropsWithoutRef<typeof DialogPrimitive.Title> & {
    isUnstyled?: boolean;
};
export declare const DialogTitle: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogTitleProps & import("react").RefAttributes<HTMLHeadingElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLHeadingElement>>;
export type DialogDescription = ComponentPropsWithoutRef<typeof DialogPrimitive.Description> & {
    isUnstyled?: boolean;
};
export declare const DialogDescription: import("react").ForwardRefExoticComponent<Omit<DialogPrimitive.DialogDescriptionProps & import("react").RefAttributes<HTMLParagraphElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLParagraphElement>>;
export declare const DialogClose: import("react").ForwardRefExoticComponent<DialogPrimitive.DialogCloseProps & import("react").RefAttributes<HTMLButtonElement>>;
