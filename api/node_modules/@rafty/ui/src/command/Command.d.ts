import { Command as CommandPrimitive } from "cmdk";
import { type ComponentPropsWithoutRef, type HTMLAttributes } from "react";
import { Dialog } from "../dialog";
export type Command = ComponentPropsWithoutRef<typeof CommandPrimitive>;
export declare const Command: import("react").ForwardRefExoticComponent<Omit<{
    children?: import("react").ReactNode;
} & HTMLAttributes<HTMLDivElement> & {
    label?: string | undefined;
    shouldFilter?: boolean | undefined;
    filter?: ((value: string, search: string) => number) | undefined;
    defaultValue?: string | undefined;
    value?: string | undefined;
    onValueChange?: ((value: string) => void) | undefined;
    loop?: boolean | undefined;
    vimBindings?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type CommandDialog = Dialog;
export declare const CommandDialog: ({ children, ...props }: CommandDialog) => import("react/jsx-runtime").JSX.Element;
export type CommandInput = ComponentPropsWithoutRef<typeof CommandPrimitive.Input>;
export declare const CommandInput: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "onChange" | "value" | "type"> & {
    value?: string | undefined;
    onValueChange?: ((search: string) => void) | undefined;
} & import("react").RefAttributes<HTMLInputElement>, "ref"> & import("react").RefAttributes<HTMLInputElement>>;
export type CommandList = ComponentPropsWithoutRef<typeof CommandPrimitive.List>;
export declare const CommandList: import("react").ForwardRefExoticComponent<Omit<{
    children?: import("react").ReactNode;
} & HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export declare const CommandLoading: import("react").ForwardRefExoticComponent<{
    children?: import("react").ReactNode;
} & HTMLAttributes<HTMLDivElement> & {
    progress?: number | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type CommandEmpty = ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>;
export declare const CommandEmpty: import("react").ForwardRefExoticComponent<Omit<{
    children?: import("react").ReactNode;
} & HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type CommandGroup = ComponentPropsWithoutRef<typeof CommandPrimitive.Group>;
export declare const CommandGroup: import("react").ForwardRefExoticComponent<Omit<{
    children?: import("react").ReactNode;
} & Omit<HTMLAttributes<HTMLDivElement>, "value" | "heading"> & {
    heading?: import("react").ReactNode;
    value?: string | undefined;
    forceMount?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type CommandSeparator = ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>;
export declare const CommandSeparator: import("react").ForwardRefExoticComponent<Omit<HTMLAttributes<HTMLDivElement> & {
    alwaysRender?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type CommandItem = ComponentPropsWithoutRef<typeof CommandPrimitive.Item>;
export declare const CommandItem: import("react").ForwardRefExoticComponent<Omit<{
    children?: import("react").ReactNode;
} & Omit<HTMLAttributes<HTMLDivElement>, "onSelect" | "value" | "disabled"> & {
    disabled?: boolean | undefined;
    onSelect?: ((value: string) => void) | undefined;
    value?: string | undefined;
    forceMount?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export type CommandShortcut = HTMLAttributes<HTMLSpanElement>;
export declare const CommandShortcut: import("react").ForwardRefExoticComponent<CommandShortcut & import("react").RefAttributes<HTMLSpanElement>>;
