import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { type ComponentPropsWithoutRef } from "react";
import { Button } from "../button";
import { type MenuBarContext } from "./context";
export declare const menubarClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Menubar = ComponentPropsWithoutRef<typeof MenubarPrimitive.Root> & Partial<MenuBarContext>;
export declare const Menubar: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & Partial<MenuBarContext> & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenubarMenu: {
    (props: MenubarPrimitive.ScopedProps<MenubarPrimitive.MenubarMenuProps>): JSX.Element;
    displayName: string;
};
export type MenubarTrigger = ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger> & Button;
export declare const MenubarTrigger: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: import("..").ValueOrFunction | undefined;
    isActive?: import("..").ValueOrFunction | undefined;
    isDisabled?: import("..").ValueOrFunction | undefined;
    isHidden?: import("..").ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export type MenubarContent = ComponentPropsWithoutRef<typeof MenubarPrimitive.Content> & {
    isUnstyled?: boolean;
};
export declare const MenubarContent: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarLabel = ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    isUnstyled?: boolean;
};
export declare const MenubarLabel: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarLabelProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarItem = ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    isUnstyled?: boolean;
};
export declare const MenubarItem: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenubarGroup: import("react").ForwardRefExoticComponent<MenubarPrimitive.MenubarGroupProps & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarCheckboxItem = ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem> & {
    isUnstyled?: boolean;
};
export declare const MenubarCheckboxItem: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarCheckboxItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenubarRadioGroup: import("react").ForwardRefExoticComponent<MenubarPrimitive.MenubarRadioGroupProps & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarRadioItem = ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem> & {
    isUnstyled?: boolean;
};
export declare const MenubarRadioItem: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarRadioItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const MenubarSub: import("react").FC<MenubarPrimitive.MenubarSubProps>;
export type MenubarSubTrigger = ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    isUnstyled?: boolean;
};
export declare const MenubarSubTrigger: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarSubTriggerProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarSubContent = ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent> & {
    isUnstyled?: boolean;
};
export declare const MenubarSubContent: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarSubContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export type MenubarSeparator = ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator> & {
    isUnstyled?: boolean;
};
export declare const MenubarSeparator: import("react").ForwardRefExoticComponent<Omit<MenubarPrimitive.MenubarSeparatorProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
