import * as PopoverPrimitive from "@radix-ui/react-popover";
import { type ComponentPropsWithoutRef } from "react";
import { Button } from "../button";
import type { ValueOrFunction } from "../types";
import { type PopoverContext } from "./context";
export type Popover = ComponentPropsWithoutRef<typeof PopoverPrimitive.Root> & Partial<PopoverContext>;
export declare function Popover({ size, isUnstyled, ...props }: Popover): import("react/jsx-runtime").JSX.Element;
export type PopoverTrigger = ComponentPropsWithoutRef<typeof PopoverPrimitive.Trigger> & Button;
export declare const PopoverTrigger: import("react").ForwardRefExoticComponent<Omit<PopoverPrimitive.PopoverTriggerProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    leftIcon?: JSX.Element | undefined;
    rightIcon?: JSX.Element | undefined;
    loadingText?: string | undefined;
    isUnstyled?: boolean | undefined;
    colorScheme?: "primary" | "secondary" | "error" | "success" | undefined;
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: ("sm" | "md" | "lg" | "icon" | "fab") | undefined;
    isLoading?: ValueOrFunction | undefined;
    isActive?: ValueOrFunction | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isHidden?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export declare const popoverContentClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type PopoverContent = ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> & {
    isUnstyled?: boolean;
    showArrow?: ValueOrFunction;
    arrowClassName?: string;
};
export declare const PopoverContent: import("react").ForwardRefExoticComponent<Omit<PopoverPrimitive.PopoverContentProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    isUnstyled?: boolean | undefined;
    showArrow?: ValueOrFunction | undefined;
    arrowClassName?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const PopoverClose: import("react").ForwardRefExoticComponent<PopoverPrimitive.PopoverCloseProps & import("react").RefAttributes<HTMLButtonElement>>;
