/// <reference types="react" />
import { SegmentGroup, type SegmentGroupItemProps, type SegmentGroupRootProps } from "@ark-ui/react";
import type { ValueOrFunction } from "../types";
import { type SegmentedControlContext } from "./context";
export declare const segmentedControlClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type SegmentedControl = Omit<SegmentGroupRootProps, "value" | "defaultValue" | "onValueChange"> & {
    isDisabled?: ValueOrFunction;
    isLoading?: ValueOrFunction;
    value?: string;
    defaultValue?: string;
    onValueChange?: (value?: string) => void;
} & Partial<SegmentedControlContext>;
export declare const SegmentedControl: import("react").ForwardRefExoticComponent<Omit<SegmentGroup.RootProps, "value" | "defaultValue" | "onValueChange"> & {
    isDisabled?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
    value?: string | undefined;
    defaultValue?: string | undefined;
    onValueChange?: ((value?: string) => void) | undefined;
} & Partial<SegmentedControlContext> & import("react").RefAttributes<HTMLDivElement>>;
export declare const segmentedControlItemClasses: (props?: ({
    readonly?: boolean | null | undefined;
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type SegmentedControlItem = SegmentGroupItemProps;
export declare const SegmentedControlItem: import("react").ForwardRefExoticComponent<SegmentGroup.ItemProps & import("react").RefAttributes<HTMLLabelElement>>;
