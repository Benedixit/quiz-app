import { type HTMLAttributes, type ReactNode } from "react";
import type { ValueOrFunction } from "../types";
import { type TimelineContext } from "./context";
export declare const timelineClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    reverse?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Timeline = HTMLAttributes<HTMLUListElement> & Partial<TimelineContext> & {
    isLoading?: ValueOrFunction;
    loadingDot?: ReactNode;
    loadingText?: ReactNode;
    isReverse?: ValueOrFunction;
    connector?: () => JSX.Element;
};
export declare const Timeline: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLUListElement> & Partial<TimelineContext> & {
    isLoading?: ValueOrFunction | undefined;
    loadingDot?: ReactNode;
    loadingText?: ReactNode;
    isReverse?: ValueOrFunction | undefined;
    connector?: (() => JSX.Element) | undefined;
} & import("react").RefAttributes<HTMLUListElement>>;
export declare const timelineItemClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    align?: "left" | "right" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const timelineItemIconClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    status?: "success" | "warning" | "error" | "info" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const timelineItemTextClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    align?: "left" | "right" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const timelineItemDescriptionClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type TimelineItem = HTMLAttributes<HTMLLIElement> & {
    icon?: ReactNode;
    description?: ReactNode;
    status?: "success" | "warning" | "error" | "info";
};
export declare const TimelineItem: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLLIElement> & {
    icon?: ReactNode;
    description?: ReactNode;
    status?: "success" | "warning" | "error" | "info" | undefined;
} & import("react").RefAttributes<HTMLLIElement>>;
export declare const timelineConnectorClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    align?: "left" | "right" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
