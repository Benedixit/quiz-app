import { type InputHTMLAttributes } from "react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export declare const inputFieldClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    variant?: "solid" | "outline" | "ghost" | null | undefined;
    disabled?: boolean | null | undefined;
    readOnly?: boolean | null | undefined;
    invalid?: boolean | null | undefined;
    isLeftAddon?: boolean | null | undefined;
    isRightAddon?: boolean | null | undefined;
    isPrefix?: boolean | null | undefined;
    isSuffix?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type InputField = Omit<InputHTMLAttributes<HTMLInputElement>, "size"> & {
    variant?: "solid" | "outline" | "ghost";
    size?: SizeType;
    isUnstyled?: boolean;
    isDisabled?: ValueOrFunction;
    isInvalid?: ValueOrFunction;
    isLoading?: ValueOrFunction;
    isReadOnly?: ValueOrFunction;
    isRequired?: ValueOrFunction;
};
export declare const InputField: import("react").ForwardRefExoticComponent<Omit<InputHTMLAttributes<HTMLInputElement>, "size"> & {
    variant?: "solid" | "outline" | "ghost" | undefined;
    size?: SizeType;
    isUnstyled?: boolean | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isInvalid?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
    isReadOnly?: ValueOrFunction | undefined;
    isRequired?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLInputElement>>;
