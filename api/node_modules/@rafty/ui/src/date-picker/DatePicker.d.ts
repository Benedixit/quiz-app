/// <reference types="react" />
import { DatePicker as ArkDatePicker, type DatePickerRootProps } from "@ark-ui/react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export declare const datPickerControlClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const datePickerContentClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type DatePicker = Omit<DatePickerRootProps, "value" | "onValueChange" | "defaultValue"> & {
    size?: SizeType;
    value?: string;
    onValueChange?: (value?: string) => void;
    defaultValue?: string;
    placeholder?: string;
    isDisabled?: ValueOrFunction;
    isInvalid?: ValueOrFunction;
    isLoading?: ValueOrFunction;
    isReadOnly?: ValueOrFunction;
};
export declare const DatePicker: import("react").ForwardRefExoticComponent<Omit<ArkDatePicker.RootProps, "value" | "onValueChange" | "defaultValue"> & {
    size?: SizeType;
    value?: string | undefined;
    onValueChange?: ((value?: string) => void) | undefined;
    defaultValue?: string | undefined;
    placeholder?: string | undefined;
    isDisabled?: ValueOrFunction | undefined;
    isInvalid?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
    isReadOnly?: ValueOrFunction | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const datePickerCalendarTriggerClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const datePickerClearButtonClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const datePickerDayCalendarButtonClasses: {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
};
export type DatePickerDayCalendar = {
    size: SizeType;
};
export declare function DatePickerDayCalendar(props: DatePickerDayCalendar): import("react/jsx-runtime").JSX.Element;
export declare const datePickerMonthAndYearButtonClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type DatePickerMonthCalendar = {
    size: SizeType;
};
export declare function DatePickerMonthCalendar(props: DatePickerMonthCalendar): import("react/jsx-runtime").JSX.Element;
export type DatePickerYearCalendar = {
    size: SizeType;
};
export declare function DatePickerYearCalendar(props: DatePickerYearCalendar): import("react/jsx-runtime").JSX.Element;
export declare const datePickerCalendarHeaderClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const datePickerCalendarHeaderNextAndPrevButtonClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const datePickerCalendarHeaderViewTriggerClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type DatePickerCalendarHeader = {
    size: SizeType;
};
export declare function DatePickerCalendarHeader(props: DatePickerCalendarHeader): import("react/jsx-runtime").JSX.Element;
