import { type HTMLAttributes } from "react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export declare const toastClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    severity?: "error" | "warning" | "info" | "success" | null | undefined;
    visible?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const toastTitleAndMessageWrapperClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const toastIconClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const toastTitleClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const toastMessageClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export type Toast = Omit<HTMLAttributes<HTMLDivElement>, "children" | "title"> & {
    title: string;
    message?: string;
    severity: "error" | "warning" | "info" | "success";
    visible?: ValueOrFunction;
    size?: SizeType;
};
export declare const Toast: import("react").ForwardRefExoticComponent<Omit<HTMLAttributes<HTMLDivElement>, "children" | "title"> & {
    title: string;
    message?: string | undefined;
    severity: "error" | "warning" | "info" | "success";
    visible?: ValueOrFunction | undefined;
    size?: SizeType;
} & import("react").RefAttributes<HTMLDivElement>>;
