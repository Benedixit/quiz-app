import { Editable, type EditableRootProps } from "@ark-ui/react";
import { type PropsWithChildren } from "react";
import type { ValueOrFunction } from "../types";
import { type SizeType } from "../utils";
export type EditableText = Omit<EditableRootProps, "activationMode" | "onValueChange"> & {
    size?: SizeType;
    isDisabled?: ValueOrFunction;
    isInvalid?: ValueOrFunction;
    isLoading?: ValueOrFunction;
    isReadOnly?: ValueOrFunction;
    onValueChange?: (value?: string) => void;
};
export declare const EditableText: import("react").ForwardRefExoticComponent<Omit<Editable.RootProps, "activationMode" | "onValueChange"> & {
    size?: SizeType;
    isDisabled?: ValueOrFunction | undefined;
    isInvalid?: ValueOrFunction | undefined;
    isLoading?: ValueOrFunction | undefined;
    isReadOnly?: ValueOrFunction | undefined;
    onValueChange?: ((value?: string) => void) | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const editableTextPreviewClasses: {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
};
export declare const editTriggerClasses: (props?: ({
    size?: "sm" | "md" | "lg" | null | undefined;
    readOnly?: boolean | null | undefined;
    disabled?: boolean | null | undefined;
} & import("class-variance-authority/dist/types").ClassProp) | undefined) => string;
export declare const editIconClasses: {
    size: {
        sm: string;
        md: string;
        lg: string;
    };
};
export type EditableItem = PropsWithChildren<{
    className?: string;
    editableTextareaPreviewClasses?: {
        size: {
            sm: string;
            md: string;
            lg: string;
        };
    };
} & Pick<EditableText, "size" | "readOnly" | "disabled">>;
export declare function EditableItem({ size, readOnly, disabled, className, editableTextareaPreviewClasses, children, }: EditableItem): import("react/jsx-runtime").JSX.Element;
